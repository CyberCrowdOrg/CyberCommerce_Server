<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.cybercrowd.mvp.mapper.RegisterWalletInfoMapper">
  <resultMap id="BaseResultMap" type="org.cybercrowd.mvp.model.RegisterWalletInfo">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="wallet_type" jdbcType="VARCHAR" property="walletType" />
    <result column="wallet_addr" jdbcType="VARCHAR" property="walletAddr" />
    <result column="private_key" jdbcType="VARCHAR" property="privateKey" />
    <result column="public_key" jdbcType="VARCHAR" property="publicKey" />
    <result column="mnemonic" jdbcType="VARCHAR" property="mnemonic" />
    <result column="wallet_pwd" jdbcType="VARCHAR" property="walletPwd" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, wallet_type, wallet_addr, private_key, public_key, mnemonic, wallet_pwd, 
    create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from register_wallet_info
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from register_wallet_info
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="org.cybercrowd.mvp.model.RegisterWalletInfo" useGeneratedKeys="true">
    insert into register_wallet_info (user_id, wallet_type, wallet_addr, 
      private_key, public_key, mnemonic, 
      wallet_pwd, create_time, update_time
      )
    values (#{userId,jdbcType=BIGINT}, #{walletType,jdbcType=VARCHAR}, #{walletAddr,jdbcType=VARCHAR}, 
      #{privateKey,jdbcType=VARCHAR}, #{publicKey,jdbcType=VARCHAR}, #{mnemonic,jdbcType=VARCHAR}, 
      #{walletPwd,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="org.cybercrowd.mvp.model.RegisterWalletInfo" useGeneratedKeys="true">
    insert into register_wallet_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="walletType != null">
        wallet_type,
      </if>
      <if test="walletAddr != null">
        wallet_addr,
      </if>
      <if test="privateKey != null">
        private_key,
      </if>
      <if test="publicKey != null">
        public_key,
      </if>
      <if test="mnemonic != null">
        mnemonic,
      </if>
      <if test="walletPwd != null">
        wallet_pwd,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="walletType != null">
        #{walletType,jdbcType=VARCHAR},
      </if>
      <if test="walletAddr != null">
        #{walletAddr,jdbcType=VARCHAR},
      </if>
      <if test="privateKey != null">
        #{privateKey,jdbcType=VARCHAR},
      </if>
      <if test="publicKey != null">
        #{publicKey,jdbcType=VARCHAR},
      </if>
      <if test="mnemonic != null">
        #{mnemonic,jdbcType=VARCHAR},
      </if>
      <if test="walletPwd != null">
        #{walletPwd,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.cybercrowd.mvp.model.RegisterWalletInfo">
    update register_wallet_info
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="walletType != null">
        wallet_type = #{walletType,jdbcType=VARCHAR},
      </if>
      <if test="walletAddr != null">
        wallet_addr = #{walletAddr,jdbcType=VARCHAR},
      </if>
      <if test="privateKey != null">
        private_key = #{privateKey,jdbcType=VARCHAR},
      </if>
      <if test="publicKey != null">
        public_key = #{publicKey,jdbcType=VARCHAR},
      </if>
      <if test="mnemonic != null">
        mnemonic = #{mnemonic,jdbcType=VARCHAR},
      </if>
      <if test="walletPwd != null">
        wallet_pwd = #{walletPwd,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.cybercrowd.mvp.model.RegisterWalletInfo">
    update register_wallet_info
    set user_id = #{userId,jdbcType=BIGINT},
      wallet_type = #{walletType,jdbcType=VARCHAR},
      wallet_addr = #{walletAddr,jdbcType=VARCHAR},
      private_key = #{privateKey,jdbcType=VARCHAR},
      public_key = #{publicKey,jdbcType=VARCHAR},
      mnemonic = #{mnemonic,jdbcType=VARCHAR},
      wallet_pwd = #{walletPwd,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>