package org.cybercrowd.mvp.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.7.
 */
@SuppressWarnings("rawtypes")
public class MvpNFT extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b5060405162003f4338038062003f438339818101604052810190620000379190620002e9565b8181816000908051906020019062000051929190620001bb565b5080600190805190602001906200006a929190620001bb565b5050506200008d62000081620000ed60201b60201c565b620000f560201b60201c565b6001600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050620004f2565b600033905090565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620001c99062000403565b90600052602060002090601f016020900481019282620001ed576000855562000239565b82601f106200020857805160ff191683800117855562000239565b8280016001018555821562000239579182015b82811115620002385782518255916020019190600101906200021b565b5b5090506200024891906200024c565b5090565b5b80821115620002675760008160009055506001016200024d565b5090565b6000620002826200027c8462000397565b6200036e565b905082815260208101848484011115620002a157620002a0620004d2565b5b620002ae848285620003cd565b509392505050565b600082601f830112620002ce57620002cd620004cd565b5b8151620002e08482602086016200026b565b91505092915050565b60008060408385031215620003035762000302620004dc565b5b600083015167ffffffffffffffff811115620003245762000323620004d7565b5b6200033285828601620002b6565b925050602083015167ffffffffffffffff811115620003565762000355620004d7565b5b6200036485828601620002b6565b9150509250929050565b60006200037a6200038d565b905062000388828262000439565b919050565b6000604051905090565b600067ffffffffffffffff821115620003b557620003b46200049e565b5b620003c082620004e1565b9050602081019050919050565b60005b83811015620003ed578082015181840152602081019050620003d0565b83811115620003fd576000848401525b50505050565b600060028204905060018216806200041c57607f821691505b602082108114156200043357620004326200046f565b5b50919050565b6200044482620004e1565b810181811067ffffffffffffffff821117156200046657620004656200049e565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b613a4180620005026000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806370a08231116100b8578063a22cb4651161007c578063a22cb46514610389578063b88d4fde146103a5578063c87b56dd146103c1578063d0def521146103f1578063e985e9c514610421578063f2fde38b1461045157610142565b806370a08231146102e3578063715018a61461031357806384b94af31461031d5780638da5cb5b1461034d57806395d89b411461036b57610142565b806323b872dd1161010a57806323b872dd146101ff5780632d06177a1461021b5780632f745c591461023757806342842e0e146102675780634f6ccce7146102835780636352211e146102b357610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c557806318160ddd146101e1575b600080fd5b610161600480360381019061015c91906128d3565b61046d565b60405161016e9190612dd2565b60405180910390f35b61017f61047f565b60405161018c9190612ded565b60405180910390f35b6101af60048036038101906101aa919061292d565b610511565b6040516101bc9190612d49565b60405180910390f35b6101df60048036038101906101da9190612893565b610557565b005b6101e961066f565b6040516101f6919061304f565b60405180910390f35b610219600480360381019061021491906126c5565b61067c565b005b61023560048036038101906102309190612658565b6106dc565b005b610251600480360381019061024c9190612893565b61073f565b60405161025e919061304f565b60405180910390f35b610281600480360381019061027c91906126c5565b6107e4565b005b61029d6004803603810190610298919061292d565b610804565b6040516102aa919061304f565b60405180910390f35b6102cd60048036038101906102c8919061292d565b610875565b6040516102da9190612d49565b60405180910390f35b6102fd60048036038101906102f89190612658565b610927565b60405161030a919061304f565b60405180910390f35b61031b6109df565b005b6103376004803603810190610332919061279b565b6109f3565b6040516103449190612db0565b60405180910390f35b610355610bb0565b6040516103629190612d49565b60405180910390f35b610373610bda565b6040516103809190612ded565b60405180910390f35b6103a3600480360381019061039e91906127f7565b610c6c565b005b6103bf60048036038101906103ba9190612718565b610c82565b005b6103db60048036038101906103d6919061292d565b610ce4565b6040516103e89190612ded565b60405180910390f35b61040b60048036038101906104069190612837565b610cf6565b604051610418919061304f565b60405180910390f35b61043b60048036038101906104369190612685565b610dfe565b6040516104489190612dd2565b60405180910390f35b61046b60048036038101906104669190612658565b610e92565b005b600061047882610f16565b9050919050565b60606000805461048e9061330a565b80601f01602080910402602001604051908101604052809291908181526020018280546104ba9061330a565b80156105075780601f106104dc57610100808354040283529160200191610507565b820191906000526020600020905b8154815290600101906020018083116104ea57829003601f168201915b5050505050905090565b600061051c82610f90565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061056282610875565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ca90612fcf565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105f2610fdb565b73ffffffffffffffffffffffffffffffffffffffff16148061062157506106208161061b610fdb565b610dfe565b5b610660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065790612f4f565b60405180910390fd5b61066a8383610fe3565b505050565b6000600880549050905090565b61068d610687610fdb565b8261109c565b6106cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c39061300f565b60405180910390fd5b6106d7838383611131565b505050565b6106e4611398565b6001600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600061074a83610927565b821061078b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078290612e0f565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b6107ff83838360405180602001604052806000815250610c82565b505050565b600061080e61066f565b821061084f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084690612fef565b60405180910390fd5b60088281548110610863576108626134a3565b5b90600052602060002001549050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561091e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091590612faf565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610998576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f90612eef565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109e7611398565b6109f16000611416565b565b6060600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610a81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7890612f2f565b60405180910390fd5b6000825111610ac5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abc9061302f565b60405180910390fd5b60005b8251811015610ba9576000838281518110610ae657610ae56134a3565b5b60200260200101515111610b2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b269061302f565b60405180910390fd5b610b39600d6114dc565b6000610b45600d6114f2565b9050610b518582611500565b610b7581858481518110610b6857610b676134a3565b5b60200260200101516116da565b80838381518110610b8957610b886134a3565b5b602002602001018181525050508080610ba19061336d565b915050610ac8565b5092915050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610be99061330a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c159061330a565b8015610c625780601f10610c3757610100808354040283529160200191610c62565b820191906000526020600020905b815481529060010190602001808311610c4557829003601f168201915b5050505050905090565b610c7e610c77610fdb565b838361174e565b5050565b610c93610c8d610fdb565b8361109c565b610cd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc99061300f565b60405180910390fd5b610cde848484846118bb565b50505050565b6060610cef82611917565b9050919050565b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610d84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7b90612f2f565b60405180910390fd5b6000825111610dc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbf9061302f565b60405180910390fd5b610dd2600d6114dc565b6000610dde600d6114f2565b9050610dea8482611500565b610df481846116da565b8091505092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610e9a611398565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0190612e4f565b60405180910390fd5b610f1381611416565b50565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610f895750610f8882611a2a565b5b9050919050565b610f9981611b0c565b610fd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcf90612faf565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661105683610875565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806110a883610875565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806110ea57506110e98185610dfe565b5b8061112857508373ffffffffffffffffffffffffffffffffffffffff1661111084610511565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661115182610875565b73ffffffffffffffffffffffffffffffffffffffff16146111a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119e90612e6f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611217576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120e90612eaf565b60405180910390fd5b611222838383611b78565b61122d600082610fe3565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461127d9190613220565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112d49190613199565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611393838383611b88565b505050565b6113a0610fdb565b73ffffffffffffffffffffffffffffffffffffffff166113be610bb0565b73ffffffffffffffffffffffffffffffffffffffff1614611414576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140b90612f8f565b60405180910390fd5b565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156790612f6f565b60405180910390fd5b61157981611b0c565b156115b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b090612e8f565b60405180910390fd5b6115c560008383611b78565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116159190613199565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46116d660008383611b88565b5050565b6116e382611b0c565b611722576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171990612f0f565b60405180910390fd5b80600a600084815260200190815260200160002090805190602001906117499291906123b0565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b490612ecf565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516118ae9190612dd2565b60405180910390a3505050565b6118c6848484611131565b6118d284848484611b8d565b611911576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190890612e2f565b60405180910390fd5b50505050565b606061192282610f90565b6000600a600084815260200190815260200160002080546119429061330a565b80601f016020809104026020016040519081016040528092919081815260200182805461196e9061330a565b80156119bb5780601f10611990576101008083540402835291602001916119bb565b820191906000526020600020905b81548152906001019060200180831161199e57829003601f168201915b5050505050905060006119cc611d24565b90506000815114156119e2578192505050611a25565b600082511115611a175780826040516020016119ff929190612d25565b60405160208183030381529060405292505050611a25565b611a2084611d3b565b925050505b919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611af557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611b055750611b0482611da3565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b611b83838383611e0d565b505050565b505050565b6000611bae8473ffffffffffffffffffffffffffffffffffffffff16611f21565b15611d17578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611bd7610fdb565b8786866040518563ffffffff1660e01b8152600401611bf99493929190612d64565b602060405180830381600087803b158015611c1357600080fd5b505af1925050508015611c4457506040513d601f19601f82011682018060405250810190611c419190612900565b60015b611cc7573d8060008114611c74576040519150601f19603f3d011682016040523d82523d6000602084013e611c79565b606091505b50600081511415611cbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb690612e2f565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611d1c565b600190505b949350505050565b606060405180602001604052806000815250905090565b6060611d4682610f90565b6000611d50611d24565b90506000815111611d705760405180602001604052806000815250611d9b565b80611d7a84611f44565b604051602001611d8b929190612d25565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611e188383836120a5565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e5b57611e56816120aa565b611e9a565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611e9957611e9883826120f3565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611edd57611ed881612260565b611f1c565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611f1b57611f1a8282612331565b5b5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60606000821415611f8c576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506120a0565b600082905060005b60008214611fbe578080611fa79061336d565b915050600a82611fb791906131ef565b9150611f94565b60008167ffffffffffffffff811115611fda57611fd96134d2565b5b6040519080825280601f01601f19166020018201604052801561200c5781602001600182028036833780820191505090505b5090505b60008514612099576001826120259190613220565b9150600a8561203491906133b6565b60306120409190613199565b60f81b818381518110612056576120556134a3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561209291906131ef565b9450612010565b8093505050505b919050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161210084610927565b61210a9190613220565b90506000600760008481526020019081526020016000205490508181146121ef576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506122749190613220565b90506000600960008481526020019081526020016000205490506000600883815481106122a4576122a36134a3565b5b9060005260206000200154905080600883815481106122c6576122c56134a3565b5b90600052602060002001819055508160096000838152602001908152602001600020819055506009600085815260200190815260200160002060009055600880548061231557612314613474565b5b6001900381819060005260206000200160009055905550505050565b600061233c83610927565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b8280546123bc9061330a565b90600052602060002090601f0160209004810192826123de5760008555612425565b82601f106123f757805160ff1916838001178555612425565b82800160010185558215612425579182015b82811115612424578251825591602001919060010190612409565b5b5090506124329190612436565b5090565b5b8082111561244f576000816000905550600101612437565b5090565b60006124666124618461308f565b61306a565b9050808382526020820190508285602086028201111561248957612488613506565b5b60005b858110156124d757813567ffffffffffffffff8111156124af576124ae613501565b5b8086016124bc8982612615565b8552602085019450602084019350505060018101905061248c565b5050509392505050565b60006124f46124ef846130bb565b61306a565b9050828152602081018484840111156125105761250f61350b565b5b61251b8482856132c8565b509392505050565b6000612536612531846130ec565b61306a565b9050828152602081018484840111156125525761255161350b565b5b61255d8482856132c8565b509392505050565b600081359050612574816139af565b92915050565b600082601f83011261258f5761258e613501565b5b813561259f848260208601612453565b91505092915050565b6000813590506125b7816139c6565b92915050565b6000813590506125cc816139dd565b92915050565b6000815190506125e1816139dd565b92915050565b600082601f8301126125fc576125fb613501565b5b813561260c8482602086016124e1565b91505092915050565b600082601f83011261262a57612629613501565b5b813561263a848260208601612523565b91505092915050565b600081359050612652816139f4565b92915050565b60006020828403121561266e5761266d613515565b5b600061267c84828501612565565b91505092915050565b6000806040838503121561269c5761269b613515565b5b60006126aa85828601612565565b92505060206126bb85828601612565565b9150509250929050565b6000806000606084860312156126de576126dd613515565b5b60006126ec86828701612565565b93505060206126fd86828701612565565b925050604061270e86828701612643565b9150509250925092565b6000806000806080858703121561273257612731613515565b5b600061274087828801612565565b945050602061275187828801612565565b935050604061276287828801612643565b925050606085013567ffffffffffffffff81111561278357612782613510565b5b61278f878288016125e7565b91505092959194509250565b600080604083850312156127b2576127b1613515565b5b60006127c085828601612565565b925050602083013567ffffffffffffffff8111156127e1576127e0613510565b5b6127ed8582860161257a565b9150509250929050565b6000806040838503121561280e5761280d613515565b5b600061281c85828601612565565b925050602061282d858286016125a8565b9150509250929050565b6000806040838503121561284e5761284d613515565b5b600061285c85828601612565565b925050602083013567ffffffffffffffff81111561287d5761287c613510565b5b61288985828601612615565b9150509250929050565b600080604083850312156128aa576128a9613515565b5b60006128b885828601612565565b92505060206128c985828601612643565b9150509250929050565b6000602082840312156128e9576128e8613515565b5b60006128f7848285016125bd565b91505092915050565b60006020828403121561291657612915613515565b5b6000612924848285016125d2565b91505092915050565b60006020828403121561294357612942613515565b5b600061295184828501612643565b91505092915050565b60006129668383612d07565b60208301905092915050565b61297b81613254565b82525050565b600061298c8261312d565b612996818561315b565b93506129a18361311d565b8060005b838110156129d25781516129b9888261295a565b97506129c48361314e565b9250506001810190506129a5565b5085935050505092915050565b6129e881613266565b82525050565b60006129f982613138565b612a03818561316c565b9350612a138185602086016132d7565b612a1c8161351a565b840191505092915050565b6000612a3282613143565b612a3c818561317d565b9350612a4c8185602086016132d7565b612a558161351a565b840191505092915050565b6000612a6b82613143565b612a75818561318e565b9350612a858185602086016132d7565b80840191505092915050565b6000612a9e602b8361317d565b9150612aa98261352b565b604082019050919050565b6000612ac160328361317d565b9150612acc8261357a565b604082019050919050565b6000612ae460268361317d565b9150612aef826135c9565b604082019050919050565b6000612b0760258361317d565b9150612b1282613618565b604082019050919050565b6000612b2a601c8361317d565b9150612b3582613667565b602082019050919050565b6000612b4d60248361317d565b9150612b5882613690565b604082019050919050565b6000612b7060198361317d565b9150612b7b826136df565b602082019050919050565b6000612b9360298361317d565b9150612b9e82613708565b604082019050919050565b6000612bb6602e8361317d565b9150612bc182613757565b604082019050919050565b6000612bd960168361317d565b9150612be4826137a6565b602082019050919050565b6000612bfc603e8361317d565b9150612c07826137cf565b604082019050919050565b6000612c1f60208361317d565b9150612c2a8261381e565b602082019050919050565b6000612c4260208361317d565b9150612c4d82613847565b602082019050919050565b6000612c6560188361317d565b9150612c7082613870565b602082019050919050565b6000612c8860218361317d565b9150612c9382613899565b604082019050919050565b6000612cab602c8361317d565b9150612cb6826138e8565b604082019050919050565b6000612cce602e8361317d565b9150612cd982613937565b604082019050919050565b6000612cf1601a8361317d565b9150612cfc82613986565b602082019050919050565b612d10816132be565b82525050565b612d1f816132be565b82525050565b6000612d318285612a60565b9150612d3d8284612a60565b91508190509392505050565b6000602082019050612d5e6000830184612972565b92915050565b6000608082019050612d796000830187612972565b612d866020830186612972565b612d936040830185612d16565b8181036060830152612da581846129ee565b905095945050505050565b60006020820190508181036000830152612dca8184612981565b905092915050565b6000602082019050612de760008301846129df565b92915050565b60006020820190508181036000830152612e078184612a27565b905092915050565b60006020820190508181036000830152612e2881612a91565b9050919050565b60006020820190508181036000830152612e4881612ab4565b9050919050565b60006020820190508181036000830152612e6881612ad7565b9050919050565b60006020820190508181036000830152612e8881612afa565b9050919050565b60006020820190508181036000830152612ea881612b1d565b9050919050565b60006020820190508181036000830152612ec881612b40565b9050919050565b60006020820190508181036000830152612ee881612b63565b9050919050565b60006020820190508181036000830152612f0881612b86565b9050919050565b60006020820190508181036000830152612f2881612ba9565b9050919050565b60006020820190508181036000830152612f4881612bcc565b9050919050565b60006020820190508181036000830152612f6881612bef565b9050919050565b60006020820190508181036000830152612f8881612c12565b9050919050565b60006020820190508181036000830152612fa881612c35565b9050919050565b60006020820190508181036000830152612fc881612c58565b9050919050565b60006020820190508181036000830152612fe881612c7b565b9050919050565b6000602082019050818103600083015261300881612c9e565b9050919050565b6000602082019050818103600083015261302881612cc1565b9050919050565b6000602082019050818103600083015261304881612ce4565b9050919050565b60006020820190506130646000830184612d16565b92915050565b6000613074613085565b9050613080828261333c565b919050565b6000604051905090565b600067ffffffffffffffff8211156130aa576130a96134d2565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156130d6576130d56134d2565b5b6130df8261351a565b9050602081019050919050565b600067ffffffffffffffff821115613107576131066134d2565b5b6131108261351a565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006131a4826132be565b91506131af836132be565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156131e4576131e36133e7565b5b828201905092915050565b60006131fa826132be565b9150613205836132be565b92508261321557613214613416565b5b828204905092915050565b600061322b826132be565b9150613236836132be565b925082821015613249576132486133e7565b5b828203905092915050565b600061325f8261329e565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156132f55780820151818401526020810190506132da565b83811115613304576000848401525b50505050565b6000600282049050600182168061332257607f821691505b6020821081141561333657613335613445565b5b50919050565b6133458261351a565b810181811067ffffffffffffffff82111715613364576133636134d2565b5b80604052505050565b6000613378826132be565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156133ab576133aa6133e7565b5b600182019050919050565b60006133c1826132be565b91506133cc836132be565b9250826133dc576133db613416565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f6e6f206d616e61676572207065726d697373696f6e7300000000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b7f546865205f746f6b656e55726c206d7573742062652068617665000000000000600082015250565b6139b881613254565b81146139c357600080fd5b50565b6139cf81613266565b81146139da57600080fd5b50565b6139e681613272565b81146139f157600080fd5b50565b6139fd816132be565b8114613a0857600080fd5b5056fea2646970667358221220c3af98bb01341ddbab62b8aaabedcea5dee7be1b84dd051be19de96cc7d5eb8f64736f6c63430008070033";

    public static final String FUNC_ADDMANAGER = "addManager";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MULTIMINT = "multiMint";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected MvpNFT(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MvpNFT(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MvpNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MvpNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> addManager(String _maddr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDMANAGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _maddr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String _recipient, String _tokenUrl) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _recipient), 
                new org.web3j.abi.datatypes.Utf8String(_tokenUrl)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> multiMint(String _recipient, List<String> _tokenUrls) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MULTIMINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _recipient), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(_tokenUrls, org.web3j.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static MvpNFT load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MvpNFT(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MvpNFT load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MvpNFT(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MvpNFT load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MvpNFT(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MvpNFT load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MvpNFT(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MvpNFT> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String name_, String symbol_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Utf8String(symbol_)));
        return deployRemoteCall(MvpNFT.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<MvpNFT> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String name_, String symbol_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Utf8String(symbol_)));
        return deployRemoteCall(MvpNFT.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<MvpNFT> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name_, String symbol_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Utf8String(symbol_)));
        return deployRemoteCall(MvpNFT.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<MvpNFT> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name_, String symbol_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Utf8String(symbol_)));
        return deployRemoteCall(MvpNFT.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
